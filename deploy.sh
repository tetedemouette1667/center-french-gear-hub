#!/bin/bash

# Script de d√©ploiement automatique pour Center French Gear Hub
# Usage: ./deploy.sh [GitHub repo URL]

set -e

echo "üöÄ Center French Gear Hub - D√©ploiement automatique"
echo "=================================================="

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier les pr√©requis
check_requirements() {
    log_info "V√©rification des pr√©requis..."
    
    if ! command -v git &> /dev/null; then
        log_error "Git n'est pas install√©"
        exit 1
    fi
    
    if ! command -v python3 &> /dev/null; then
        log_error "Python 3 n'est pas install√©"
        exit 1
    fi
    
    if ! command -v node &> /dev/null; then
        log_error "Node.js n'est pas install√©"
        exit 1
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Tester l'application
test_application() {
    log_info "Test de l'application..."
    
    if python3 test_deployment.py; then
        log_success "Tous les tests pass√©s"
    else
        log_error "Tests √©chou√©s - D√©ploiement interrompu"
        exit 1
    fi
}

# Pr√©parer le repository Git
prepare_git() {
    log_info "Pr√©paration du repository Git..."
    
    # Initialiser Git si n√©cessaire
    if [ ! -d ".git" ]; then
        git init
        log_success "Repository Git initialis√©"
    fi
    
    # Ajouter tous les fichiers
    git add .
    
    # V√©rifier s'il y a des changements
    if git diff --staged --quiet; then
        log_warning "Aucun changement d√©tect√©"
    else
        # Commit des changements
        commit_message="üöÄ Deploy Center French Gear Hub - $(date +'%Y-%m-%d %H:%M:%S')"
        git commit -m "$commit_message"
        log_success "Changements commit√©es"
    fi
}

# Configurer le repository remote
setup_remote() {
    local repo_url="$1"
    
    if [ -z "$repo_url" ]; then
        log_warning "URL du repository GitHub non fournie"
        log_info "Cr√©ez un repository sur GitHub et relancez avec:"
        log_info "./deploy.sh https://github.com/votre-username/center-french-gear-hub.git"
        return 1
    fi
    
    log_info "Configuration du repository remote..."
    
    # Supprimer l'origine existante si elle existe
    if git remote get-url origin &> /dev/null; then
        git remote remove origin
    fi
    
    # Ajouter la nouvelle origine
    git remote add origin "$repo_url"
    git branch -M main
    
    log_success "Repository remote configur√©: $repo_url"
}

# Pousser vers GitHub
push_to_github() {
    log_info "Push vers GitHub..."
    
    if git push -u origin main; then
        log_success "Code pouss√© vers GitHub"
    else
        log_error "√âchec du push vers GitHub"
        log_info "V√©rifiez vos permissions et l'URL du repository"
        exit 1
    fi
}

# G√©n√©rer les instructions Vercel
generate_vercel_instructions() {
    log_info "G√©n√©ration des instructions Vercel..."
    
    cat << EOF > VERCEL_SETUP.md
# Instructions de D√©ploiement Vercel

## 1. Connecter √† Vercel
1. Allez sur https://vercel.com
2. Connectez-vous avec votre compte GitHub
3. Cliquez sur "New Project"
4. Importez votre repository GitHub

## 2. Variables d'environnement
Dans Vercel ‚Üí Settings ‚Üí Environment Variables, ajoutez:

\`\`\`
MONGO_URL=mongodb+srv://username:password@cluster.mongodb.net/roblox_gear_hub
REACT_APP_BACKEND_URL=https://your-app-name.vercel.app
JWT_SECRET=your-super-secret-jwt-key-change-this
\`\`\`

## 3. MongoDB Atlas
1. Cr√©ez un cluster sur https://cloud.mongodb.com
2. Configurez l'acc√®s r√©seau (0.0.0.0/0)
3. Cr√©ez un utilisateur de base de donn√©es
4. Copiez la connection string dans MONGO_URL

## 4. D√©ploiement
- Vercel d√©ploiera automatiquement √† chaque push
- Premi√®re connexion: root / Mouse123890!
- Changez le mot de passe admin apr√®s d√©ploiement

## 5. Test
Testez votre d√©ploiement avec:
\`\`\`bash
python3 test_deployment.py vercel
\`\`\`

üéâ Votre Center French Gear Hub est maintenant en ligne !
EOF

    log_success "Instructions Vercel g√©n√©r√©es dans VERCEL_SETUP.md"
}

# Afficher le r√©sum√©
show_summary() {
    log_info "R√©sum√© du d√©ploiement"
    echo "===================="
    echo "üìÅ Repository: $(git remote get-url origin 2>/dev/null || echo 'Non configur√©')"
    echo "üåê Prochaine √©tape: D√©ploiement Vercel"
    echo "üìñ Instructions: VERCEL_SETUP.md"
    echo ""
    log_success "D√©ploiement pr√©par√© avec succ√®s !"
    echo ""
    log_warning "Prochaines √©tapes:"
    echo "1. Configurez MongoDB Atlas"
    echo "2. D√©ployez sur Vercel"
    echo "3. Configurez les variables d'environnement"
    echo "4. Testez le d√©ploiement"
}

# Fonction principale
main() {
    local repo_url="$1"
    
    check_requirements
    test_application
    prepare_git
    
    if setup_remote "$repo_url"; then
        push_to_github
    fi
    
    generate_vercel_instructions
    show_summary
}

# Ex√©cuter le script
main "$@"