#!/usr/bin/env python3
"""
Script d'initialisation pour Vercel
Initialise la base de donn√©es avec des donn√©es de test
"""
import asyncio
import os
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime
import uuid
from passlib.context import CryptContext

# Configuration
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password):
    return pwd_context.hash(password)

# Sample gears data avec de vraies images Roblox
sample_gears = [
    {
        "id": str(uuid.uuid4()),
        "name": "Sword of the Ancient",
        "nickname": "√âp√©e L√©gendaire",
        "gear_id": "123456789",
        "image_url": "https://assetdelivery.roblox.com/v1/asset/?id=16134749",
        "description": "Une √©p√©e puissante forg√©e dans les temps anciens.",
        "category": "joueurs",
        "created_at": datetime.utcnow()
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Lightning Bolt",
        "nickname": "√âclair Divin",
        "gear_id": "987654321",
        "image_url": "https://assetdelivery.roblox.com/v1/asset/?id=12902404",
        "description": "Un √©clair qui frappe les ennemis avec une puissance divine.",
        "category": "joueurs",
        "created_at": datetime.utcnow()
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Shield of Defense",
        "nickname": "Bouclier D√©fensif",
        "gear_id": "111222333",
        "image_url": "https://assetdelivery.roblox.com/v1/asset/?id=11377306",
        "description": "Un bouclier qui prot√®ge contre les attaques.",
        "category": "joueurs",
        "created_at": datetime.utcnow()
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Staff of Power",
        "nickname": "B√¢ton Magique",
        "gear_id": "444555666",
        "image_url": "https://assetdelivery.roblox.com/v1/asset/?id=13838250",
        "description": "Un b√¢ton magique qui augmente les pouvoirs des mod√©rateurs.",
        "category": "mod√©rateur",
        "created_at": datetime.utcnow()
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Admin Portal Gun",
        "nickname": "Pistolet Portail Admin",
        "gear_id": "777888999",
        "image_url": "https://assetdelivery.roblox.com/v1/asset/?id=13838309",
        "description": "Permet de cr√©er des portails pour les mod√©rateurs.",
        "category": "mod√©rateur",
        "created_at": datetime.utcnow()
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Fireworks Launcher",
        "nickname": "Lance-Feux",
        "gear_id": "456789123",
        "image_url": "https://assetdelivery.roblox.com/v1/asset/?id=12902404",
        "description": "Lance des feux d'artifice spectaculaires pour les √©v√©nements.",
        "category": "√©v√©nements",
        "created_at": datetime.utcnow()
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Party Horn",
        "nickname": "Cor de F√™te",
        "gear_id": "321654987",
        "image_url": "https://assetdelivery.roblox.com/v1/asset/?id=12144993",
        "description": "Fait du bruit pour animer les √©v√©nements.",
        "category": "√©v√©nements",
        "created_at": datetime.utcnow()
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Celebration Confetti",
        "nickname": "Confettis de F√™te",
        "gear_id": "159753486",
        "image_url": "https://assetdelivery.roblox.com/v1/asset/?id=12144993",
        "description": "Lance des confettis pour c√©l√©brer les √©v√©nements sp√©ciaux.",
        "category": "√©v√©nements",
        "created_at": datetime.utcnow()
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Banned Weapon",
        "nickname": "Arme Interdite",
        "gear_id": "000000000",
        "image_url": "https://assetdelivery.roblox.com/v1/asset/?id=16975630",
        "description": "Cette arme est trop puissante et donc strictement interdite.",
        "category": "interdits",
        "created_at": datetime.utcnow()
    },
    {
        "id": str(uuid.uuid4()),
        "name": "Exploit Tool",
        "nickname": "Outil d'Exploit",
        "gear_id": "999999999",
        "image_url": "https://assetdelivery.roblox.com/v1/asset/?id=16975630",
        "description": "Outil utilis√© pour exploiter - strictement interdit.",
        "category": "interdits",
        "created_at": datetime.utcnow()
    }
]

async def initialize_database():
    """Initialise la base de donn√©es avec les donn√©es de test"""
    
    # Obtenir l'URL MongoDB depuis les variables d'environnement
    mongo_url = os.environ.get('MONGO_URL')
    if not mongo_url:
        print("‚ùå MONGO_URL non trouv√©e dans les variables d'environnement")
        return False
    
    try:
        # Connexion √† MongoDB
        client = AsyncIOMotorClient(mongo_url)
        db = client.roblox_gear_hub
        
        # V√©rifier la connexion
        await client.admin.command('ping')
        print("‚úÖ Connexion √† MongoDB √©tablie")
        
        # V√©rifier si des donn√©es existent d√©j√†
        existing_gears = await db.gears.count_documents({})
        existing_users = await db.users.count_documents({})
        
        # Initialiser les gears si n√©cessaire
        if existing_gears == 0:
            await db.gears.insert_many(sample_gears)
            print(f"‚úÖ {len(sample_gears)} gears ajout√©s √† la base de donn√©es")
        else:
            print(f"‚ÑπÔ∏è  {existing_gears} gears d√©j√† pr√©sents dans la base")
        
        # Cr√©er l'utilisateur root si n√©cessaire
        if existing_users == 0:
            root_user = {
                "id": str(uuid.uuid4()),
                "username": "root",
                "password_hash": get_password_hash("Mouse123890!"),
                "role": "cr√©ateur",
                "created_at": datetime.utcnow()
            }
            await db.users.insert_one(root_user)
            print("‚úÖ Utilisateur root cr√©√©")
        else:
            print(f"‚ÑπÔ∏è  {existing_users} utilisateurs d√©j√† pr√©sents dans la base")
        
        # Compter les gears par cat√©gorie
        for category in ["joueurs", "mod√©rateur", "√©v√©nements", "interdits"]:
            count = await db.gears.count_documents({"category": category})
            print(f"   - {category}: {count} gears")
        
        client.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(initialize_database())
    if success:
        print("\nüéâ Base de donn√©es initialis√©e avec succ√®s !")
    else:
        print("\nüí• √âchec de l'initialisation de la base de donn√©es")
        exit(1)